{"format": "torch", "nodes": [{"name": "transform", "id": 140621841340456, "class_name": "GeneralizedRCNNTransform(\n    Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])\n    Resize(min_size=(800,), max_size=1333, mode='bilinear')\n)", "parameters": [], "output_shape": [[], [[[[0], [0], [0], [0], 0], [[0], [0], [0], [0], 0], [[0], 0, 0, 0, 0, 0], [[0], 0, 0, [0], 0, [0], 0, [0]], [0, [0], 0, 0], [0, 0, [0], 0, 0, [0], 0]], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]]], "num_parameters": []}, {"name": "backbone", "id": 140621822934376, "class_name": "BackboneWithFPN(\n  (body): IntermediateLayerGetter(\n    (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)\n    (bn1): FrozenBatchNorm2d(64, eps=1e-05)\n    (relu): ReLU(inplace=True)\n    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n    (layer1): Sequential(\n      (0): Bottleneck(\n        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn1): FrozenBatchNorm2d(64, eps=1e-05)\n        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): FrozenBatchNorm2d(64, eps=1e-05)\n        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn3): FrozenBatchNorm2d(256, eps=1e-05)\n        (relu): ReLU(inplace=True)\n        (downsample): Sequential(\n          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (1): FrozenBatchNorm2d(256, eps=1e-05)\n        )\n      )\n      (1): Bottleneck(\n        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn1): FrozenBatchNorm2d(64, eps=1e-05)\n        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): FrozenBatchNorm2d(64, eps=1e-05)\n        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn3): FrozenBatchNorm2d(256, eps=1e-05)\n        (relu): ReLU(inplace=True)\n      )\n      (2): Bottleneck(\n        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn1): FrozenBatchNorm2d(64, eps=1e-05)\n        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): FrozenBatchNorm2d(64, eps=1e-05)\n        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn3): FrozenBatchNorm2d(256, eps=1e-05)\n        (relu): ReLU(inplace=True)\n      )\n    )\n    (layer2): Sequential(\n      (0): Bottleneck(\n        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn1): FrozenBatchNorm2d(128, eps=1e-05)\n        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n        (bn2): FrozenBatchNorm2d(128, eps=1e-05)\n        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn3): FrozenBatchNorm2d(512, eps=1e-05)\n        (relu): ReLU(inplace=True)\n        (downsample): Sequential(\n          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)\n          (1): FrozenBatchNorm2d(512, eps=1e-05)\n        )\n      )\n      (1): Bottleneck(\n        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn1): FrozenBatchNorm2d(128, eps=1e-05)\n        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): FrozenBatchNorm2d(128, eps=1e-05)\n        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn3): FrozenBatchNorm2d(512, eps=1e-05)\n        (relu): ReLU(inplace=True)\n      )\n      (2): Bottleneck(\n        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn1): FrozenBatchNorm2d(128, eps=1e-05)\n        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): FrozenBatchNorm2d(128, eps=1e-05)\n        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn3): FrozenBatchNorm2d(512, eps=1e-05)\n        (relu): ReLU(inplace=True)\n      )\n      (3): Bottleneck(\n        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn1): FrozenBatchNorm2d(128, eps=1e-05)\n        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): FrozenBatchNorm2d(128, eps=1e-05)\n        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn3): FrozenBatchNorm2d(512, eps=1e-05)\n        (relu): ReLU(inplace=True)\n      )\n    )\n    (layer3): Sequential(\n      (0): Bottleneck(\n        (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn1): FrozenBatchNorm2d(256, eps=1e-05)\n        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n        (bn2): FrozenBatchNorm2d(256, eps=1e-05)\n        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn3): FrozenBatchNorm2d(1024, eps=1e-05)\n        (relu): ReLU(inplace=True)\n        (downsample): Sequential(\n          (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)\n          (1): FrozenBatchNorm2d(1024, eps=1e-05)\n        )\n      )\n      (1): Bottleneck(\n        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn1): FrozenBatchNorm2d(256, eps=1e-05)\n        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): FrozenBatchNorm2d(256, eps=1e-05)\n        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn3): FrozenBatchNorm2d(1024, eps=1e-05)\n        (relu): ReLU(inplace=True)\n      )\n      (2): Bottleneck(\n        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn1): FrozenBatchNorm2d(256, eps=1e-05)\n        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): FrozenBatchNorm2d(256, eps=1e-05)\n        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn3): FrozenBatchNorm2d(1024, eps=1e-05)\n        (relu): ReLU(inplace=True)\n      )\n      (3): Bottleneck(\n        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn1): FrozenBatchNorm2d(256, eps=1e-05)\n        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): FrozenBatchNorm2d(256, eps=1e-05)\n        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn3): FrozenBatchNorm2d(1024, eps=1e-05)\n        (relu): ReLU(inplace=True)\n      )\n      (4): Bottleneck(\n        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn1): FrozenBatchNorm2d(256, eps=1e-05)\n        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): FrozenBatchNorm2d(256, eps=1e-05)\n        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn3): FrozenBatchNorm2d(1024, eps=1e-05)\n        (relu): ReLU(inplace=True)\n      )\n      (5): Bottleneck(\n        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn1): FrozenBatchNorm2d(256, eps=1e-05)\n        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): FrozenBatchNorm2d(256, eps=1e-05)\n        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn3): FrozenBatchNorm2d(1024, eps=1e-05)\n        (relu): ReLU(inplace=True)\n      )\n    )\n    (layer4): Sequential(\n      (0): Bottleneck(\n        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn1): FrozenBatchNorm2d(512, eps=1e-05)\n        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n        (bn2): FrozenBatchNorm2d(512, eps=1e-05)\n        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn3): FrozenBatchNorm2d(2048, eps=1e-05)\n        (relu): ReLU(inplace=True)\n        (downsample): Sequential(\n          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)\n          (1): FrozenBatchNorm2d(2048, eps=1e-05)\n        )\n      )\n      (1): Bottleneck(\n        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn1): FrozenBatchNorm2d(512, eps=1e-05)\n        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): FrozenBatchNorm2d(512, eps=1e-05)\n        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn3): FrozenBatchNorm2d(2048, eps=1e-05)\n        (relu): ReLU(inplace=True)\n      )\n      (2): Bottleneck(\n        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn1): FrozenBatchNorm2d(512, eps=1e-05)\n        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): FrozenBatchNorm2d(512, eps=1e-05)\n        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn3): FrozenBatchNorm2d(2048, eps=1e-05)\n        (relu): ReLU(inplace=True)\n      )\n    )\n  )\n  (fpn): FeaturePyramidNetwork(\n    (inner_blocks): ModuleList(\n      (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))\n      (1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))\n      (2): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))\n      (3): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))\n    )\n    (layer_blocks): ModuleList(\n      (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    )\n    (extra_blocks): LastLevelMaxPool()\n  )\n)", "parameters": [["body.conv1.weight", [64, 3, 7, 7]], ["body.layer1.0.conv1.weight", [64, 64, 1, 1]], ["body.layer1.0.conv2.weight", [64, 64, 3, 3]], ["body.layer1.0.conv3.weight", [256, 64, 1, 1]], ["body.layer1.0.downsample.0.weight", [256, 64, 1, 1]], ["body.layer1.1.conv1.weight", [64, 256, 1, 1]], ["body.layer1.1.conv2.weight", [64, 64, 3, 3]], ["body.layer1.1.conv3.weight", [256, 64, 1, 1]], ["body.layer1.2.conv1.weight", [64, 256, 1, 1]], ["body.layer1.2.conv2.weight", [64, 64, 3, 3]], ["body.layer1.2.conv3.weight", [256, 64, 1, 1]], ["body.layer2.0.conv1.weight", [128, 256, 1, 1]], ["body.layer2.0.conv2.weight", [128, 128, 3, 3]], ["body.layer2.0.conv3.weight", [512, 128, 1, 1]], ["body.layer2.0.downsample.0.weight", [512, 256, 1, 1]], ["body.layer2.1.conv1.weight", [128, 512, 1, 1]], ["body.layer2.1.conv2.weight", [128, 128, 3, 3]], ["body.layer2.1.conv3.weight", [512, 128, 1, 1]], ["body.layer2.2.conv1.weight", [128, 512, 1, 1]], ["body.layer2.2.conv2.weight", [128, 128, 3, 3]], ["body.layer2.2.conv3.weight", [512, 128, 1, 1]], ["body.layer2.3.conv1.weight", [128, 512, 1, 1]], ["body.layer2.3.conv2.weight", [128, 128, 3, 3]], ["body.layer2.3.conv3.weight", [512, 128, 1, 1]], ["body.layer3.0.conv1.weight", [256, 512, 1, 1]], ["body.layer3.0.conv2.weight", [256, 256, 3, 3]], ["body.layer3.0.conv3.weight", [1024, 256, 1, 1]], ["body.layer3.0.downsample.0.weight", [1024, 512, 1, 1]], ["body.layer3.1.conv1.weight", [256, 1024, 1, 1]], ["body.layer3.1.conv2.weight", [256, 256, 3, 3]], ["body.layer3.1.conv3.weight", [1024, 256, 1, 1]], ["body.layer3.2.conv1.weight", [256, 1024, 1, 1]], ["body.layer3.2.conv2.weight", [256, 256, 3, 3]], ["body.layer3.2.conv3.weight", [1024, 256, 1, 1]], ["body.layer3.3.conv1.weight", [256, 1024, 1, 1]], ["body.layer3.3.conv2.weight", [256, 256, 3, 3]], ["body.layer3.3.conv3.weight", [1024, 256, 1, 1]], ["body.layer3.4.conv1.weight", [256, 1024, 1, 1]], ["body.layer3.4.conv2.weight", [256, 256, 3, 3]], ["body.layer3.4.conv3.weight", [1024, 256, 1, 1]], ["body.layer3.5.conv1.weight", [256, 1024, 1, 1]], ["body.layer3.5.conv2.weight", [256, 256, 3, 3]], ["body.layer3.5.conv3.weight", [1024, 256, 1, 1]], ["body.layer4.0.conv1.weight", [512, 1024, 1, 1]], ["body.layer4.0.conv2.weight", [512, 512, 3, 3]], ["body.layer4.0.conv3.weight", [2048, 512, 1, 1]], ["body.layer4.0.downsample.0.weight", [2048, 1024, 1, 1]], ["body.layer4.1.conv1.weight", [512, 2048, 1, 1]], ["body.layer4.1.conv2.weight", [512, 512, 3, 3]], ["body.layer4.1.conv3.weight", [2048, 512, 1, 1]], ["body.layer4.2.conv1.weight", [512, 2048, 1, 1]], ["body.layer4.2.conv2.weight", [512, 512, 3, 3]], ["body.layer4.2.conv3.weight", [2048, 512, 1, 1]], ["fpn.inner_blocks.0.weight", [256, 256, 1, 1]], ["fpn.inner_blocks.0.bias", [256]], ["fpn.inner_blocks.1.weight", [256, 512, 1, 1]], ["fpn.inner_blocks.1.bias", [256]], ["fpn.inner_blocks.2.weight", [256, 1024, 1, 1]], ["fpn.inner_blocks.2.bias", [256]], ["fpn.inner_blocks.3.weight", [256, 2048, 1, 1]], ["fpn.inner_blocks.3.bias", [256]], ["fpn.layer_blocks.0.weight", [256, 256, 3, 3]], ["fpn.layer_blocks.0.bias", [256]], ["fpn.layer_blocks.1.weight", [256, 256, 3, 3]], ["fpn.layer_blocks.1.bias", [256]], ["fpn.layer_blocks.2.weight", [256, 256, 3, 3]], ["fpn.layer_blocks.2.bias", [256]], ["fpn.layer_blocks.3.weight", [256, 256, 3, 3]], ["fpn.layer_blocks.3.bias", [256]]], "output_shape": [[[[0]], [[0]], [[0]], [[0]], [[0], [0], 0, [0]]]], "num_parameters": [9408, 4096, 36864, 16384, 16384, 16384, 36864, 16384, 16384, 36864, 16384, 32768, 147456, 65536, 131072, 65536, 147456, 65536, 65536, 147456, 65536, 65536, 147456, 65536, 131072, 589824, 262144, 524288, 262144, 589824, 262144, 262144, 589824, 262144, 262144, 589824, 262144, 262144, 589824, 262144, 262144, 589824, 262144, 524288, 2359296, 1048576, 2097152, 1048576, 2359296, 1048576, 1048576, 2359296, 1048576, 65536, 256, 131072, 256, 262144, 256, 524288, 256, 589824, 256, 589824, 256, 589824, 256, 589824, 256]}, {"name": "rpn", "id": 140621841339560, "class_name": "RegionProposalNetwork(\n  (anchor_generator): AnchorGenerator()\n  (head): RPNHead(\n    (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (cls_logits): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))\n    (bbox_pred): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))\n  )\n)", "parameters": [["head.conv.weight", [256, 256, 3, 3]], ["head.conv.bias", [256]], ["head.cls_logits.weight", [3, 256, 1, 1]], ["head.cls_logits.bias", [3]], ["head.bbox_pred.weight", [12, 256, 1, 1]], ["head.bbox_pred.bias", [12]]], "output_shape": [[[2000, 4], [2000, 4], [2000, 4], [2000, 4]], [[[0], [0], [0], 0, [0], 0, [0], [0], [0], [0], [0], [0], 0, 0, 0], [0, 0, 0, 0, 0, [0], [0], 0, 0, 0, 0, [0], 0, 0, 0, [0]]]], "num_parameters": [589824, 256, 768, 3, 3072, 12]}, {"name": "roi_heads", "id": 140621841340232, "class_name": "RoIHeads(\n  (box_roi_pool): MultiScaleRoIAlign(featmap_names=['0', '1', '2', '3'], output_size=(7, 7), sampling_ratio=2)\n  (box_head): TwoMLPHead(\n    (fc6): Linear(in_features=12544, out_features=1024, bias=True)\n    (fc7): Linear(in_features=1024, out_features=1024, bias=True)\n  )\n  (box_predictor): FastRCNNPredictor(\n    (cls_score): Linear(in_features=1024, out_features=2, bias=True)\n    (bbox_pred): Linear(in_features=1024, out_features=8, bias=True)\n  )\n)", "parameters": [["box_head.fc6.weight", [1024, 12544]], ["box_head.fc6.bias", [1024]], ["box_head.fc7.weight", [1024, 1024]], ["box_head.fc7.bias", [1024]], ["box_predictor.cls_score.weight", [2, 1024]], ["box_predictor.cls_score.bias", [2]], ["box_predictor.bbox_pred.weight", [8, 1024]], ["box_predictor.bbox_pred.bias", [8]]], "output_shape": [[], [[[0], [0], [0], 0, [0], [0], 0, [0], 0, 0, [0], [0], 0, [0], [0]], [0, 0, 0, 0, 0, [0], 0, [0], 0, 0, 0, [0]]]], "num_parameters": [12845056, 1024, 1048576, 1024, 2048, 2, 8192, 8]}], "edges": []}